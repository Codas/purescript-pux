// Generated by psc-bundle 0.8.0.0
var PS = { };
(function(exports) {
  /* global exports */
  "use strict";

  // module Prelude

  //- Functor --------------------------------------------------------------------

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      return xs.concat(ys);
    };
  };

  //- Show -----------------------------------------------------------------------

  exports.showIntImpl = function (n) {
    return n.toString();
  };
 
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Prelude"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var Category = function (__superclass_Prelude$dotSemigroupoid_0, id) {
      this["__superclass_Prelude.Semigroupoid_0"] = __superclass_Prelude$dotSemigroupoid_0;
      this.id = id;
  };
  var Functor = function (map) {
      this.map = map;
  };
  var Apply = function (__superclass_Prelude$dotFunctor_0, apply) {
      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      this.apply = apply;
  };
  var Applicative = function (__superclass_Prelude$dotApply_0, pure) {
      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
      this.pure = pure;
  };
  var Bind = function (__superclass_Prelude$dotApply_0, bind) {
      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
      this.bind = bind;
  };
  var Monad = function (__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
      this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
      this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
  };
  var Semigroup = function (append) {
      this.append = append;
  };
  var Show = function (show) {
      this.show = show;
  };                                                                           
  var unit = {};                                     
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };                                                                     
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var semigroupArray = new Semigroup($foreign.concatArray);
  var pure = function (dict) {
      return dict.pure;
  };
  var $$return = function (dictApplicative) {
      return pure(dictApplicative);
  };
  var map = function (dict) {
      return dict.map;
  };
  var $less$dollar$greater = function (dictFunctor) {
      return map(dictFunctor);
  };
  var id = function (dict) {
      return dict.id;
  };
  var functorArray = new Functor($foreign.arrayMap);
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  var compose = function (dict) {
      return dict.compose;
  };
  var categoryFn = new Category(function () {
      return semigroupoidFn;
  }, function (x) {
      return x;
  });
  var bind = function (dict) {
      return dict.bind;
  };
  var $greater$greater$eq = function (dictBind) {
      return bind(dictBind);
  }; 
  var apply = function (dict) {
      return dict.apply;
  };
  var $less$times$greater = function (dictApply) {
      return apply(dictApply);
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return $less$times$greater(dictApplicative["__superclass_Prelude.Apply_0"]())(pure(dictApplicative)(f))(a);
          };
      };
  }; 
  var append = function (dict) {
      return dict.append;
  };
  var $less$greater = function (dictSemigroup) {
      return append(dictSemigroup);
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return bind(dictMonad["__superclass_Prelude.Bind_1"]())(f)(function (v) {
                  return bind(dictMonad["__superclass_Prelude.Bind_1"]())(a)(function (v1) {
                      return $$return(dictMonad["__superclass_Prelude.Applicative_0"]())(v(v1));
                  });
              });
          };
      };
  };
  exports["Show"] = Show;
  exports["Semigroup"] = Semigroup;
  exports["Monad"] = Monad;
  exports["Bind"] = Bind;
  exports["Applicative"] = Applicative;
  exports["Apply"] = Apply;
  exports["Functor"] = Functor;
  exports["Category"] = Category;
  exports["Semigroupoid"] = Semigroupoid;
  exports["show"] = show;
  exports["<>"] = $less$greater;
  exports["append"] = append;
  exports["ap"] = ap;
  exports["return"] = $$return;
  exports[">>="] = $greater$greater$eq;
  exports["bind"] = bind;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
  exports["<*>"] = $less$times$greater;
  exports["apply"] = apply;
  exports["<$>"] = $less$dollar$greater;
  exports["map"] = map;
  exports["id"] = id;
  exports["compose"] = compose;
  exports["const"] = $$const;
  exports["flip"] = flip;
  exports["unit"] = unit;
  exports["semigroupoidFn"] = semigroupoidFn;
  exports["categoryFn"] = categoryFn;
  exports["functorArray"] = functorArray;
  exports["semigroupArray"] = semigroupArray;
  exports["showInt"] = showInt;;
 
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var $times$greater = function (dictApply) {
      return function (a) {
          return function (b) {
              return Prelude["<*>"](dictApply)(Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(Prelude["const"](Prelude.id(Prelude.categoryFn)))(a))(b);
          };
      };
  };
  exports["*>"] = $times$greater;;
 
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var $eq$less$less = function (dictBind) {
      return function (f) {
          return function (m) {
              return Prelude[">>="](dictBind)(m)(f);
          };
      };
  };
  exports["=<<"] = $eq$less$less;;
 
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.Eff

  exports.returnE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
 
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];     
  var monadEff = new Prelude.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Prelude.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Prelude.Apply(function () {
      return functorEff;
  }, Prelude.ap(monadEff));
  var applicativeEff = new Prelude.Applicative(function () {
      return applyEff;
  }, $foreign.returnE);
  var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;;
 
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  /* global exports, console */
  "use strict";

  // module Control.Monad.Eff.Console

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };
 
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Console"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  exports["log"] = $foreign.log;;
 
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  /* global exports, window */
  "use strict";

  // module DOM.HTML

  exports.window = function () {
    return window;
  };
 
})(PS["DOM.HTML"] = PS["DOM.HTML"] || {});
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function(x) { return x; }
 
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;;
 
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["DOM.HTML.Types"];
  var Prelude = PS["Prelude"];
  var Data_Either = PS["Data.Either"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Foreign_Class = PS["Data.Foreign.Class"];
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];              
  var htmlDocumentToParentNode = Unsafe_Coerce.unsafeCoerce;
  exports["htmlDocumentToParentNode"] = htmlDocumentToParentNode;;
 
})(PS["DOM.HTML.Types"] = PS["DOM.HTML.Types"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["DOM.HTML"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  exports["window"] = $foreign.window;;
 
})(PS["DOM.HTML"] = PS["DOM.HTML"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module DOM.HTML.Window

  exports.document = function (window) {
    return function () {
      return window.document;
    };
  };
 
})(PS["DOM.HTML.Window"] = PS["DOM.HTML.Window"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["DOM.HTML.Window"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  exports["document"] = $foreign.document;;
 
})(PS["DOM.HTML.Window"] = PS["DOM.HTML.Window"] || {});
(function(exports) {
  /* global exports */
  "use strict";                                               

  exports.querySelector = function (selector) {
    return function (node) {
      return function () {
        return node.querySelector(selector);
      };
    };
  };
 
})(PS["DOM.Node.ParentNode"] = PS["DOM.Node.ParentNode"] || {});
(function(exports) {
  /* global exports */
  "use strict";          

  exports.nullable = function(a, r, f) {
      return a == null ? r : f(a);
  }; 
 
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;;
 
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Extend = PS["Control.Extend"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];     
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 26, column 1 - line 27, column 1: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var fromMaybe = function (a) {
      return maybe(a)(Prelude.id(Prelude.categoryFn));
  };
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["fromMaybe"] = fromMaybe;
  exports["maybe"] = maybe;;
 
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Nullable"];
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Function = PS["Data.Function"];                              
  var toMaybe = function (n) {
      return $foreign.nullable(n, Data_Maybe.Nothing.value, Data_Maybe.Just.create);
  };
  exports["toMaybe"] = toMaybe;;
 
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["DOM.Node.ParentNode"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Nullable = PS["Data.Nullable"];
  var DOM = PS["DOM"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  exports["querySelector"] = $foreign.querySelector;;
 
})(PS["DOM.Node.ParentNode"] = PS["DOM.Node.ParentNode"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Extending arrays ------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.cons = function (e) {
    return function (l) {
      return [e].concat(l);
    };
  };

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports["uncons'"] = function (empty) {
    return function (next) {
      return function (xs) {
        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
      };
    };
  };

  exports.concat = function (xss) {
    var result = [];
    for (var i = 0, l = xss.length; i < l; i++) {
      var xs = xss[i];
      for (var j = 0, m = xs.length; j < m; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };
 
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Foldable

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
 
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Prelude = PS["Prelude"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];     
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)(function ($161) {
                  return Control_Apply["*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(f($161));
              })(Prelude.pure(dictApplicative)(Prelude.unit));
          };
      };
  };
  var sequence_ = function (dictApplicative) {
      return function (dictFoldable) {
          return traverse_(dictApplicative)(dictFoldable)(Prelude.id(Prelude.categoryFn));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return function (xs) {
                  return foldr(dictFoldable)(function (x) {
                      return function (acc) {
                          return Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                      };
                  })(Data_Monoid.mempty(dictMonoid))(xs);
              };
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  exports["Foldable"] = Foldable;
  exports["sequence_"] = sequence_;
  exports["traverse_"] = traverse_;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["foldMap"] = foldMap;
  exports["foldl"] = foldl;
  exports["foldr"] = foldr;
  exports["foldableArray"] = foldableArray;;
 
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Maybe.Unsafe

  exports.unsafeThrow = function (msg) {
    throw new Error(msg);
  };
 
})(PS["Data.Maybe.Unsafe"] = PS["Data.Maybe.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Maybe.Unsafe"];
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];     
  var fromJust = function (v) {
      if (v instanceof Data_Maybe.Just) {
          return v.value0;
      };
      if (v instanceof Data_Maybe.Nothing) {
          return $foreign.unsafeThrow("Data.Maybe.Unsafe.fromJust called on Nothing");
      };
      throw new Error("Failed pattern match at Data.Maybe.Unsafe line 10, column 1 - line 11, column 1: " + [ v.constructor.name ]);
  };
  exports["fromJust"] = fromJust;;
 
})(PS["Data.Maybe.Unsafe"] = PS["Data.Maybe.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Array"];
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];     
  var $colon = $foreign.cons;
  var head = $foreign["uncons'"](Prelude["const"](Data_Maybe.Nothing.value))(function (x) {
      return function (v) {
          return new Data_Maybe.Just(x);
      };
  });
  exports["head"] = head;
  exports[":"] = $colon;;
 
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];     
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var $colon = Cons.create;
  var singleton = function (a) {
      return new Cons(a, Nil.value);
  }; 
  var reverse = (function () {
      var go = function (__copy_acc) {
          return function (__copy_v) {
              var acc = __copy_acc;
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Nil) {
                      return acc;
                  };
                  if (v instanceof Cons) {
                      var __tco_acc = new Cons(v.value0, acc);
                      var __tco_v = v.value1;
                      acc = __tco_acc;
                      v = __tco_v;
                      continue tco;
                  };
                  throw new Error("Failed pattern match at Data.List line 368, column 1 - line 369, column 1: " + [ acc.constructor.name, v.constructor.name ]);
              };
          };
      };
      return go(Nil.value);
  })();
  var functorList = new Prelude.Functor(function (f) {
      return function (lst) {
          var go = function (__copy_v) {
              return function (__copy_acc) {
                  var v = __copy_v;
                  var acc = __copy_acc;
                  tco: while (true) {
                      if (v instanceof Nil) {
                          return acc;
                      };
                      if (v instanceof Cons) {
                          var __tco_v = v.value1;
                          var __tco_acc = new Cons(f(v.value0), acc);
                          v = __tco_v;
                          acc = __tco_acc;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.List line 731, column 1 - line 738, column 1: " + [ v.constructor.name, acc.constructor.name ]);
                  };
              };
          };
          return reverse(go(lst)(Nil.value));
      };
  });
  var fromFoldable = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(Cons.create)(Nil.value);
  };
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              return function ($365) {
                  return Prelude.append(dictMonoid["__superclass_Prelude.Semigroup_0"]())(acc)(f($365));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, (function () {
      var go = function (__copy_v) {
          return function (__copy_b) {
              return function (__copy_v1) {
                  var v = __copy_v;
                  var b = __copy_b;
                  var v1 = __copy_v1;
                  tco: while (true) {
                      if (v1 instanceof Nil) {
                          return b;
                      };
                      if (v1 instanceof Cons) {
                          var __tco_v = v;
                          var __tco_b = v(b)(v1.value0);
                          var __tco_v1 = v1.value1;
                          v = __tco_v;
                          b = __tco_b;
                          v1 = __tco_v1;
                          continue tco;
                      };
                      throw new Error("Failed pattern match: " + [ v.constructor.name, b.constructor.name, v1.constructor.name ]);
                  };
              };
          };
      };
      return go;
  })(), function (v) {
      return function (b) {
          return function (v1) {
              if (v1 instanceof Nil) {
                  return b;
              };
              if (v1 instanceof Cons) {
                  return v(v1.value0)(Data_Foldable.foldr(foldableList)(v)(b)(v1.value1));
              };
              throw new Error("Failed pattern match: " + [ v.constructor.name, b.constructor.name, v1.constructor.name ]);
          };
      };
  });
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["reverse"] = reverse;
  exports[":"] = $colon;
  exports["singleton"] = singleton;
  exports["fromFoldable"] = fromFoldable;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;;
 
})(PS["Data.List"] = PS["Data.List"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Apply = PS["Control.Apply"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Prelude = PS["Prelude"];
  var Pux_React_Types = PS["Pux.React.Types"];     
  var Node = (function () {
      function Node(value0, value1, value2, value3, value4) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
      };
      Node.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return new Node(value0, value1, value2, value3, value4);
                      };
                  };
              };
          };
      };
      return Node;
  })();
  var Content = (function () {
      function Content(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Content.create = function (value0) {
          return function (value1) {
              return new Content(value0, value1);
          };
      };
      return Content;
  })();
  var Return = (function () {
      function Return(value0) {
          this.value0 = value0;
      };
      Return.create = function (value0) {
          return new Return(value0);
      };
      return Return;
  })();
  var Handler = (function () {
      function Handler(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Handler.create = function (value0) {
          return function (value1) {
              return new Handler(value0, value1);
          };
      };
      return Handler;
  })();
  var Attrs = (function () {
      function Attrs(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Attrs.create = function (value0) {
          return function (value1) {
              return new Attrs(value0, value1);
          };
      };
      return Attrs;
  })();
  var Attributable = function ($$with) {
      this["with"] = $$with;
  };
  var $$with = function (dict) {
      return dict["with"];
  };
  var $bang = function (dictAttributable) {
      return $$with(dictAttributable);
  }; 
  var functorVDomM = new Prelude.Functor(function (f) {
      return function (v) {
          if (v instanceof Node) {
              return new Node(v.value0, v.value1, v.value2, v.value3, Prelude.map(functorVDomM)(f)(v.value4));
          };
          if (v instanceof Content) {
              return new Content(v.value0, Prelude.map(functorVDomM)(f)(v.value1));
          };
          if (v instanceof Return) {
              return new Return(f(v.value0));
          };
          throw new Error("Failed pattern match: " + [ f.constructor.name, v.constructor.name ]);
      };
  });
  var attributableVDomM = new Attributable(function (v) {
      return function (v1) {
          if (v instanceof Node) {
              return new Node(v.value0, v.value1, Prelude["<>"](Prelude.semigroupArray)(v.value2)(v1.value0), Prelude["<>"](Prelude.semigroupArray)(v.value3)(v1.value1), v.value4);
          };
          if (v instanceof Content) {
              return new Content(v.value0, v.value1);
          };
          if (v instanceof Return) {
              return new Return(v.value0);
          };
          throw new Error("Failed pattern match at Pux.DOM line 120, column 1 - line 126, column 1: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var attributableVDomMF = new Attributable(function (k) {
      return function (xs) {
          return function (m) {
              return $$with(attributableVDomM)(k(m))(xs);
          };
      };
  });
  var monadVDomM = new Prelude.Monad(function () {
      return applicativeVDomM;
  }, function () {
      return bindVDomM;
  });
  var bindVDomM = new Prelude.Bind(function () {
      return applyVDomM;
  }, function (v) {
      return function (f) {
          if (v instanceof Node) {
              return new Node(v.value0, v.value1, v.value2, v.value3, Prelude.bind(bindVDomM)(v.value4)(f));
          };
          if (v instanceof Content) {
              return new Content(v.value0, Prelude.bind(bindVDomM)(v.value1)(f));
          };
          if (v instanceof Return) {
              return f(v.value0);
          };
          throw new Error("Failed pattern match: " + [ v.constructor.name, f.constructor.name ]);
      };
  });
  var applyVDomM = new Prelude.Apply(function () {
      return functorVDomM;
  }, Prelude.ap(monadVDomM));
  var applicativeVDomM = new Prelude.Applicative(function () {
      return applyVDomM;
  }, Return.create);
  exports["Node"] = Node;
  exports["Content"] = Content;
  exports["Return"] = Return;
  exports["Handler"] = Handler;
  exports["Attrs"] = Attrs;
  exports["Attributable"] = Attributable;
  exports["!"] = $bang;
  exports["functorVDomM"] = functorVDomM;
  exports["applyVDomM"] = applyVDomM;
  exports["applicativeVDomM"] = applicativeVDomM;
  exports["bindVDomM"] = bindVDomM;
  exports["monadVDomM"] = monadVDomM;
  exports["attributableVDomM"] = attributableVDomM;
  exports["attributableVDomMF"] = attributableVDomMF;;
 
})(PS["Pux.DOM"] = PS["Pux.DOM"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Data_Maybe = PS["Data.Maybe"];
  var Prelude = PS["Prelude"];
  var Pux_DOM = PS["Pux.DOM"];     
  var text = function (str) {
      return new Pux_DOM.Content(str, new Pux_DOM.Return(Prelude.unit));
  };
  var parent = function (el) {
      return function (children) {
          return new Pux_DOM.Node(el, new Data_Maybe.Just(children), [  ], [  ], new Pux_DOM.Return(Prelude.unit));
      };
  };                          
  var p = parent("p");  
  var div = parent("div");      
  var button = parent("button");
  exports["p"] = p;
  exports["div"] = div;
  exports["button"] = button;
  exports["text"] = text;
  exports["parent"] = parent;;
 
})(PS["Pux.DOM.HTML.Elements"] = PS["Pux.DOM.HTML.Elements"] || {});
(function(exports) {
  "use strict";

  // module Pux.React

  var React;

  if (typeof window === 'object' && typeof window.React === 'object') {
    React = window.React;
  } else if (typeof require === 'function') {
    React = require('react');
  } else {
    throw new Error(
      'React was not found on the `window` object or `require()` was not defined.'
    );
  }

  exports.getInputFF = function (ctx) {
    return function () {
      return ctx.state.input;
    };
  };

  exports.writeStateFF = function (ctx) {
    return function (state) {
      ctx.setState(state);
      return function () {
        return function () {};
      };
    };
  };

  exports.makeReactComponentFF = function (render) {
    return function (componentWillMount) {
      var Component = function Component() {};
      Component.prototype = Object.create(React.Component.prototype);
      Component.displayName = 'Pux';
      Component.prototype.componentWillMount = function () {
        componentWillMount(this)();
      };
      Component.prototype.render = function () {
        return render(this)(this.state)();
      };
      return Component;
    };
  };

  exports.makeAttrFF = function (key) {
    return function(value) {
      var result = {};
      result[key] = value;
      return result;
    };
  };

  exports.makeHandlerFF = function (key) {
    return function (f) {
      return function (input) {
        var result = {};
        result[key] = function (ev) {
          f(input)(ev)();
        };
        return result;
      };
    };
  };

  function makeProps(props) {
    var result = {};
    for (var i = 0, len = props.length; i < len; i++) {
      var prop = props[i];
      for (var key in prop) {
        if (prop.hasOwnProperty(key)) {
          result[key] = prop[key];
        }
      }
    }
    return result;
  };

  exports.makeReactElementFF = function (tagName) {
    return function (props) {
      return function (children) {
        var args = [tagName, props.length > 0 ? makeProps(props) : null].concat(children);
        return React.createElement.apply(React, args);
      }
    }
  };

  exports.makeReactTextFF = function (text) {
    return text;
  };
 
})(PS["Pux.React"] = PS["Pux.React"] || {});
(function(exports) {
  // module Signal.Channel

  exports.channelP =
    function channelP(constant) {
      return function(v) {
        return function() {
          return constant(v);
        };
      };
    };

  exports.sendP =
    function sendP(chan, v) {
      return function(v) {
        return function() {
          chan.set(v);
        };
      };
    };

  exports.subscribe =
    function subscribe(chan) {
      return chan;
    };
 
})(PS["Signal.Channel"] = PS["Signal.Channel"] || {});
(function(exports) {
  // module Signal

  exports.constant =
    function constant(initial) {
      var subs = [];
      var val = initial;
      var sig = {
        subscribe: function(sub) {
          subs.push(sub);
          sub(val);
        },
        get: function() { return val; },
        set: function(newval) {
          val = newval;
          subs.forEach(function(sub) { sub(newval); });
        }
      };
      return sig;
    };

  exports.mapSigP =
    function mapSigP(constant) {
      return function(fun) {
        return function(sig) {
          var out = constant(fun(sig.get()));
          sig.subscribe(function(val) { out.set(fun(val)); });
          return out;
        };
      };
    };

  exports.mergeP =
    function mergeP(constant) {
      return function(sig1) {
        return function(sig2) {
          var out = constant(sig1.get());
          sig2.subscribe(out.set);
          sig1.subscribe(out.set);
          return out;
        };
      };
    };

  exports.foldpP =
    function foldpP(constant) {
      return function(fun) {
        return function(seed) {
          return function(sig) {
            var acc = seed;
            var out = constant(acc);
            sig.subscribe(function(val) {
              acc = fun(val)(acc);
              out.set(acc);
            });
            return out;
          };
        };
      };
    };

  exports.runSignal =
    function runSignal(sig) {
      return function() {
        sig.subscribe(function(val) {
          val();
        });
        return {};
      };
    };
 
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Signal"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];                   
  var merge = $foreign.mergeP($foreign.constant);
  var mergeMany = function (dictFunctor) {
      return function (dictFoldable) {
          return function (sigs) {
              var mergeMaybe = function (v) {
                  return function (v1) {
                      if (v1 instanceof Data_Maybe.Nothing) {
                          return v;
                      };
                      if (v instanceof Data_Maybe.Nothing) {
                          return v1;
                      };
                      if (v instanceof Data_Maybe.Just && v1 instanceof Data_Maybe.Just) {
                          return new Data_Maybe.Just(merge(v.value0)(v1.value0));
                      };
                      throw new Error("Failed pattern match at Signal line 59, column 9 - line 60, column 9: " + [ v.constructor.name, v1.constructor.name ]);
                  };
              };
              return Data_Foldable.foldl(dictFoldable)(mergeMaybe)(Data_Maybe.Nothing.value)(Prelude["<$>"](dictFunctor)(Data_Maybe.Just.create)(sigs));
          };
      };
  };                                                 
  var mapSig = $foreign.mapSigP($foreign.constant);
  var functorSignal = new Prelude.Functor(mapSig);
  var foldp = $foreign.foldpP($foreign.constant);
  var flippedMap = function (dictFunctor) {
      return Prelude.flip(Prelude.map(dictFunctor));
  };
  exports["flippedMap"] = flippedMap;
  exports["foldp"] = foldp;
  exports["mergeMany"] = mergeMany;
  exports["merge"] = merge;
  exports["functorSignal"] = functorSignal;
  exports["runSignal"] = $foreign.runSignal;
  exports["constant"] = $foreign.constant;;
 
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Signal.Channel"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];     
  var send = $foreign.sendP;
  var channel = $foreign.channelP(Signal.constant);
  exports["send"] = send;
  exports["channel"] = channel;
  exports["subscribe"] = $foreign.subscribe;;
 
})(PS["Signal.Channel"] = PS["Signal.Channel"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Pux.React"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var Data_List = PS["Data.List"];
  var Prelude = PS["Prelude"];
  var Pux_React_Types = PS["Pux.React.Types"];
  var Pux_DOM = PS["Pux.DOM"];
  var Signal_Channel = PS["Signal.Channel"];     
  var makeHandler = function (k) {
      return function (effects) {
          return function (actions) {
              var h = function (ctx) {
                  return function (ev) {
                      var fx = Prelude.map(Data_List.functorList)(function (fx1) {
                          return fx1(ev);
                      })(effects);
                      return function __do() {
                          var v = $foreign.getInputFF(ctx)();
                          return Signal_Channel.send(v)(actions(ev))();
                      };
                  };
              };
              return new Pux_DOM.Attrs([  ], [ $foreign.makeHandlerFF(k)(h) ]);
          };
      };
  };
  var makeAttr = function (k) {
      return function (v) {
          return new Pux_DOM.Attrs([ $foreign.makeAttrFF(k)(v) ], [  ]);
      };
  };
  exports["makeHandler"] = makeHandler;
  exports["makeAttr"] = makeAttr;
  exports["makeReactTextFF"] = $foreign.makeReactTextFF;
  exports["makeReactElementFF"] = $foreign.makeReactElementFF;
  exports["makeReactComponentFF"] = $foreign.makeReactComponentFF;
  exports["writeStateFF"] = $foreign.writeStateFF;;
 
})(PS["Pux.React"] = PS["Pux.React"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Data_List = PS["Data.List"];
  var DOM = PS["DOM"];
  var Prelude = PS["Prelude"];
  var Pux_DOM = PS["Pux.DOM"];
  var Pux_React = PS["Pux.React"];
  var Pux_React_Types = PS["Pux.React.Types"];
  var Signal_Channel = PS["Signal.Channel"];  
  var value = Pux_React.makeAttr("value");
  var send = function (a) {
      return new Pux_DOM.Handler(Data_List.singleton(a), Data_List.Nil.value);
  };
  var onClick = function (v) {
      return Pux_React.makeHandler("onClick")(v.value1)(function (ev) {
          return v.value0;
      });
  };
  exports["value"] = value;
  exports["onClick"] = onClick;
  exports["send"] = send;;
 
})(PS["Pux.DOM.HTML.Attributes"] = PS["Pux.DOM.HTML.Attributes"] || {});
(function(exports) {
  "use strict";

  // module Pux.Render.DOM

  exports.renderFF = function (component) {
    return function (container) {
      return function () {
        ReactDOM.render(React.createElement(component), container);
        return function () {};
      };
    };
  };
 
})(PS["Pux.Render.DOM"] = PS["Pux.Render.DOM"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Pux.Render.DOM"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];
  var DOM = PS["DOM"];
  var DOM_HTML = PS["DOM.HTML"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var DOM_HTML_Window = PS["DOM.HTML.Window"];
  var DOM_Node_ParentNode = PS["DOM.Node.ParentNode"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Signal_Channel = PS["Signal.Channel"];
  var Pux_React_Types = PS["Pux.React.Types"];     
  var findContainer = function (selector) {
      return function __do() {
          var v = DOM_HTML.window();
          var v1 = DOM_HTML_Window.document(v)();
          var v2 = DOM_Node_ParentNode.querySelector(selector)(DOM_HTML_Types.htmlDocumentToParentNode(v1))();
          return Data_Maybe_Unsafe.fromJust(Data_Nullable.toMaybe(v2));
      };
  };
  var renderToDOM = function (selector) {
      return function (app) {
          return function __do() {
              var v = findContainer(selector)();
              $foreign.renderFF(app)(v)();
              return Prelude.unit;
          };
      };
  };
  exports["renderToDOM"] = renderToDOM;;
 
})(PS["Pux.Render.DOM"] = PS["Pux.Render.DOM"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Array = PS["Data.Array"];
  var Data_List = PS["Data.List"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];
  var DOM = PS["DOM"];
  var Prelude = PS["Prelude"];
  var Pux_DOM = PS["Pux.DOM"];
  var Pux_React = PS["Pux.React"];
  var Pux_React_Types = PS["Pux.React.Types"];
  var Signal = PS["Signal"];
  var Signal_Channel = PS["Signal.Channel"];     
  var renderHandler = function (ctx) {
      return function (mkhandler) {
          return mkhandler(ctx);
      };
  };
  var renderNode = function (ctx) {
      return function (v) {
          if (v instanceof Pux_DOM.Node && v.value1 instanceof Data_Maybe.Just) {
              return Data_Array[":"](Pux_React.makeReactElementFF(v.value0)(Prelude["<>"](Prelude.semigroupArray)(v.value2)(Prelude.map(Prelude.functorArray)(renderHandler(ctx))(v.value3)))(renderNode(ctx)(v.value1.value0)))(renderNode(ctx)(v.value4));
          };
          if (v instanceof Pux_DOM.Node && v.value1 instanceof Data_Maybe.Nothing) {
              return Data_Array[":"](Pux_React.makeReactElementFF(v.value0)(Prelude["<>"](Prelude.semigroupArray)(v.value2)(Prelude.map(Prelude.functorArray)(renderHandler(ctx))(v.value3)))([  ]))(renderNode(ctx)(v.value4));
          };
          if (v instanceof Pux_DOM.Content) {
              return Data_Array[":"](Pux_React.makeReactTextFF(v.value0))(renderNode(ctx)(v.value1));
          };
          if (v instanceof Pux_DOM.Return) {
              return [  ];
          };
          throw new Error("Failed pattern match: " + [ ctx.constructor.name, v.constructor.name ]);
      };
  };
  var renderToReact = function (ctx) {
      return function (vdom) {
          var emptydiv = Pux_React.makeReactElementFF("div")([  ])([  ]);
          return Data_Maybe.fromMaybe(emptydiv)(Data_Array.head(renderNode(ctx)(vdom)));
      };
  };
  var app = function (config) {
      return function __do() {
          var v = Signal_Channel.channel(Data_List.Nil.value)();
          var render = function (ctx) {
              return function (state) {
                  return Prelude["return"](Control_Monad_Eff.applicativeEff)(renderToReact(ctx)(config.view(state.state)));
              };
          };
          var noEffects = function (state) {
              return {
                  state: state, 
                  effects: [  ]
              };
          };
          var foldState = function (effState) {
              return function (action) {
                  return config.update(action)(effState.state)(v);
              };
          };
          var foldActions = function (actions) {
              return function (effState) {
                  return Data_Foldable.foldl(Data_List.foldableList)(foldState)(noEffects(effState.state))(actions);
              };
          };
          var actionSignal = Signal_Channel.subscribe(v);
          var input = Data_Maybe_Unsafe.fromJust(Signal.mergeMany(Data_List.functorList)(Data_List.foldableList)(Data_List.reverse(Data_List[":"](actionSignal)(Prelude.map(Data_List.functorList)(Prelude.map(Signal.functorSignal)(Data_List.singleton))(Data_List.fromFoldable(Data_Foldable.foldableArray)(config.inputs))))));
          var effStateSignal = Signal.foldp(foldActions)(noEffects(config.state))(input);
          var componentWillMount = function (ctx) {
              var runEffects = function (effState) {
                  return function __do() {
                      Pux_React.writeStateFF(ctx)({
                          input: input, 
                          state: effState.state
                      })();
                      return Data_Foldable.sequence_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableArray)(effState.effects)();
                  };
              };
              var renderSignal = Signal.flippedMap(Signal.functorSignal)(effStateSignal)(runEffects);
              return Signal.runSignal(renderSignal);
          };
          var component = Pux_React.makeReactComponentFF(render)(componentWillMount);
          return component;
      };
  };
  exports["app"] = app;;
 
})(PS["Pux.App"] = PS["Pux.App"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Pux = PS["Pux"];
  var Pux_DOM_HTML_Elements = PS["Pux.DOM.HTML.Elements"];
  var Pux_DOM_HTML_Attributes = PS["Pux.DOM.HTML.Attributes"];
  var Pux_Render_DOM = PS["Pux.Render.DOM"];
  var Pux_DOM = PS["Pux.DOM"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Pux_App = PS["Pux.App"];     
  var Increment = (function () {
      function Increment() {

      };
      Increment.value = new Increment();
      return Increment;
  })();
  var Decrement = (function () {
      function Decrement() {

      };
      Decrement.value = new Decrement();
      return Decrement;
  })();
  var view = function (state) {
      return Pux_DOM_HTML_Elements.div(Prelude.bind(Pux_DOM.bindVDomM)(Pux_DOM_HTML_Elements.p(Pux_DOM_HTML_Elements.text("Counter: " + Prelude.show(Prelude.showInt)(state.counter))))(function () {
          return Pux_DOM_HTML_Elements.p(Prelude.bind(Pux_DOM.bindVDomM)(Pux_DOM["!"](Pux_DOM.attributableVDomMF)(Pux_DOM_HTML_Elements.button)(Pux_DOM_HTML_Attributes.onClick(Pux_DOM_HTML_Attributes.send(Increment.value)))(Pux_DOM_HTML_Elements.text("Increment")))(function () {
              return Pux_DOM["!"](Pux_DOM.attributableVDomMF)(Pux_DOM_HTML_Elements.button)(Pux_DOM_HTML_Attributes.onClick(Pux_DOM_HTML_Attributes.send(Decrement.value)))(Pux_DOM_HTML_Elements.text("Decrement"));
          }));
      }));
  };
  var update = function (action) {
      return function (state) {
          return function (input) {
              if (action instanceof Increment) {
                  return {
                      state: (function () {
                          var $1 = {};
                          for (var $2 in state) {
                              if (state.hasOwnProperty($2)) {
                                  $1[$2] = state[$2];
                              };
                          };
                          $1.counter = state.counter + 1 | 0;
                          return $1;
                      })(), 
                      effects: [ Control_Monad_Eff_Console.log("increment") ]
                  };
              };
              if (action instanceof Decrement) {
                  return {
                      state: (function () {
                          var $3 = {};
                          for (var $4 in state) {
                              if (state.hasOwnProperty($4)) {
                                  $3[$4] = state[$4];
                              };
                          };
                          $3.counter = state.counter - 1;
                          return $3;
                      })(), 
                      effects: [ Control_Monad_Eff_Console.log("decrement") ]
                  };
              };
              throw new Error("Failed pattern match at Main line 19, column 1 - line 20, column 1: " + [ action.constructor.name ]);
          };
      };
  };
  var initialState = {
      counter: 0
  };
  var main = Control_Bind["=<<"](Control_Monad_Eff.bindEff)(Pux_Render_DOM.renderToDOM("#app"))(Pux_App.app({
      state: initialState, 
      update: update, 
      view: view, 
      inputs: [  ]
  }));
  exports["Increment"] = Increment;
  exports["Decrement"] = Decrement;
  exports["main"] = main;
  exports["view"] = view;
  exports["update"] = update;
  exports["initialState"] = initialState;;
 
})(PS["Main"] = PS["Main"] || {});
